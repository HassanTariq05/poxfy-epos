import React from 'react';
import {View, Text, ScrollView, StyleSheet} from 'react-native';
import {useSelector} from 'react-redux';
import {getSelectedOutlet} from '../../../redux/feature/oulet-slice';
import {getUserDetails} from '../../../redux/feature/auth-slice';

interface CashRegisterInvoiceProps {
  invoiceRef: any;
  registerData: any;
  cashDifference: any;
  cardDifference: any;
  creditDifference: any;
}

const CashRegisterInvoice: React.FC<CashRegisterInvoiceProps> = ({
  invoiceRef,
  registerData,
  cashDifference,
  cardDifference,
  creditDifference,
}) => {
  const {transaction, createdBy} = registerData || {};
  const {selectedOutlet} = useSelector(getSelectedOutlet) || {};
  const {user} = useSelector(getUserDetails) || {};

  const safeNumber = (value: any) =>
    isNaN(Number(value)) ? '0.00' : Number(value).toFixed(2);
  const calculate = (rec: any, ref: any) =>
    Number(Number(rec) - Number(ref)).toFixed(2);

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerText}>
          {registerData?.cashRegister?.name}
        </Text>
        <Text style={styles.headerText}>Register Summary</Text>
      </View>

      <View style={styles.addressRow}>
        <Text style={styles.addressText}>
          {selectedOutlet?.state}, {selectedOutlet?.city},{' '}
          {selectedOutlet?.street}
        </Text>
        <Text style={styles.addressText}>
          {registerData?.startTime
            ? `${new Date(
                registerData.startTime,
              ).toLocaleDateString()} - ${new Date(
                registerData.startTime,
              ).toLocaleTimeString()}`
            : 'No Date Available'}{' '}
          to{' '}
          {`${new Date().toLocaleDateString()} - ${new Date().toLocaleTimeString()}`}
        </Text>
      </View>

      <View style={styles.table}>
        <View style={styles.rowHeader}>
          <Text style={styles.columnHeader}>Payment</Text>
          <Text style={styles.columnHeaderRight}>Expected</Text>
          <Text style={styles.columnHeaderRight}>Counted</Text>
          <Text style={styles.columnHeaderRight}>Difference</Text>
        </View>

        {[
          {
            label: 'Cash',
            expected: transaction?.cash,
            counted: registerData?.transaction?.cash,
            difference: cashDifference,
          },
          {
            label: 'Card',
            expected: transaction?.card,
            counted: registerData?.transaction?.card,
            difference: cardDifference,
          },
          {
            label: 'Store Credit',
            expected: transaction?.credit,
            counted: registerData?.transaction?.credit,
            difference: creditDifference,
          },
        ].map((item, index) => (
          <View key={index} style={styles.row}>
            <Text style={styles.cell}>{item.label}</Text>
            <Text style={styles.cellRight}>{safeNumber(item.expected)}</Text>
            <Text style={styles.cellRight}>{safeNumber(item.counted)}</Text>
            <Text style={styles.cellRight}>{item.difference || '0.00'}</Text>
          </View>
        ))}
      </View>

      <View style={styles.summary}>
        <View style={styles.summaryRow}>
          <Text style={styles.summaryText}>Payments:</Text>
          <Text style={styles.summaryValue}>
            {safeNumber(transaction?.received)}
          </Text>
        </View>

        <View style={styles.summaryRow}>
          <Text style={styles.summaryText}>Refunds:</Text>
          <Text style={styles.summaryValue}>
            {safeNumber(transaction?.refund)}
          </Text>
        </View>

        <View style={[styles.summaryRow, styles.borderTop]}>
          <Text style={styles.summaryText}>Net Receipts:</Text>
          <Text style={styles.summaryValue}>
            {calculate(transaction?.received || 0, transaction?.refund || 0)}
          </Text>
        </View>
      </View>

      <View style={styles.footer}>
        <Text style={styles.footerText}>
          Generated by: {createdBy?.name || user?.name}
        </Text>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#fff',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 10,
  },
  headerText: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  addressRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 15,
  },
  addressText: {
    fontSize: 14,
    color: '#555',
  },
  table: {
    borderTopWidth: 2,
    borderBottomWidth: 2,
    borderColor: '#000',
    paddingVertical: 10,
  },
  rowHeader: {
    flexDirection: 'row',
    borderBottomWidth: 2,
    borderColor: '#000',
    paddingBottom: 5,
  },
  row: {
    flexDirection: 'row',
    borderBottomWidth: 1,
    borderColor: '#ddd',
    paddingVertical: 8,
  },
  columnHeader: {
    flex: 1,
    fontWeight: 'bold',
    fontSize: 14,
  },
  columnHeaderRight: {
    flex: 1,
    fontWeight: 'bold',
    fontSize: 14,
    textAlign: 'right',
  },
  cell: {
    flex: 1,
    fontSize: 13,
  },
  cellRight: {
    flex: 1,
    fontSize: 13,
    textAlign: 'right',
  },
  summary: {
    marginTop: 10,
    paddingVertical: 10,
  },
  summaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 5,
  },
  summaryText: {
    fontSize: 14,
    fontWeight: 'bold',
  },
  summaryValue: {
    fontSize: 14,
  },
  borderTop: {
    borderTopWidth: 1,
    borderColor: '#ddd',
    paddingTop: 5,
  },
  footer: {
    marginTop: 20,
    alignItems: 'center',
  },
  footerText: {
    fontSize: 14,
    color: '#777',
  },
});

export default CashRegisterInvoice;
